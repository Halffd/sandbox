(defun fibonacci (n)
  (format t "Computing fibonacci(~D)~%" n)
  (if (< n 2)
      n
      (let ((result-1 (fibonacci (- n 1)))
            (result-2 (fibonacci (- n 2))))
        (format t "fibonacci(~D-1) = ~D~%" n result-1)
        (format t "fibonacci(~D-2) = ~D~%" n result-2)
        (+ result-1 result-2))))
(defun fibonacci (n)
  (let ((memo (make-hash-table)))
    (labels ((fib-memo (x)
               (format t "Computing fibonacci(~D)~%" x)
               (or (gethash x memo)
                   (setf (gethash x memo)
                         (if (< x 2)
                             x
                             (+ (fib-memo (- x 1))
                                (fib-memo (- x 2))))))))
      (fib-memo n))))
(fibonacci 4)
(fibonacci -3)
(fibonacci 0)
(fibonacci 1)
(fibonacci 22)
; Computing fibonacci(4)
; Computing fibonacci(3)
; Computing fibonacci(2)
; Computing fibonacci(1)
; Computing fibonacci(0)
; Computing fibonacci(1)
